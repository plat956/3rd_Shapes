package by.latushko.training.repository;

import by.latushko.training.comparator.RectangleComparator;
import by.latushko.training.entity.Point;
import by.latushko.training.entity.Rectangle;
import by.latushko.training.repository.impl.IdSpecification;
import by.latushko.training.repository.impl.OffsetOverStartOfTheCoordinateAxisSpecification;
import by.latushko.training.repository.impl.PerimeterSpecification;
import by.latushko.training.warehouse.RectangleWarehouse;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.util.List;

import static org.testng.Assert.*;

public class RectangleRepositoryTest {

    @BeforeClass
    public void setUp() {
        Rectangle firstRectangle = new Rectangle(new Point(1, 1), 10, 20);
        Rectangle secondRectangle = new Rectangle(new Point(3, 5), 15, 30);
        Rectangle thirdRectangle = new Rectangle(new Point(6, 8), 13.3d, 6.5d);

        RectangleRepository repository = RectangleRepository.getInstance();
        repository.add(firstRectangle);
        repository.add(secondRectangle);
        repository.add(thirdRectangle);
    }

    @Test
    public void testRemove() {
        RectangleRepository repository = RectangleRepository.getInstance();
        Rectangle rectangleToRemove = repository.get(2);
        boolean actual = repository.remove(rectangleToRemove);

        assertTrue(actual);
    }

    @Test
    public void testQueryWithOffsetOverStartOfTheCoordinateAxisSpecification() {
        var specification = new OffsetOverStartOfTheCoordinateAxisSpecification(20, 25);
        RectangleRepository repository = RectangleRepository.getInstance();

        List<Rectangle> rectangles = repository.query(o -> specification.specify(o));

        int actual = rectangles.size();
        int expected = 2;

        assertEquals(actual, expected);
    }

    @Test
    public void testSort() {
        RectangleRepository repository = RectangleRepository.getInstance();
        List<Rectangle> actual = repository.sort(RectangleComparator.HEIGHT.getComparator());

        Rectangle firstRectangle = new Rectangle(new Point(6, 8), 13.3d, 6.5d);
        Rectangle secondRectangle = new Rectangle(new Point(1, 1), 10, 20);
        Rectangle thirdRectangle = new Rectangle(new Point(3, 5), 15, 30);

        //Autogenerated identifiers were changed by hand because they influence on equals&hashCode methods results
        firstRectangle.setRectangleId(3L);
        secondRectangle.setRectangleId(1L);
        thirdRectangle.setRectangleId(2L);

        List<Rectangle> expected = List.of(firstRectangle, secondRectangle, thirdRectangle);

        assertEquals(actual, expected);
    }
}